# /app/reppy/schemas.py
from pydantic import BaseModel, Field
from typing import Literal, List, Dict, Any

# --- User Profile Schemas ---
class UserProfile(BaseModel):
    experience_level: Literal["beginner", "intermediate", "advanced"]
    fitness_goal: Literal["bulking", "cutting", "endurance", "maintenance"]
    weekly_availability: int = Field(..., gt=0, le=7, description="Number of days available to work out per week")
    age: int = Field(..., gt=0)
    sex: Literal["male", "female", "other"]
    height: float = Field(..., gt=0, description="Height in cm")
    weight: float = Field(..., gt=0, description="Weight in kg")
    available_equipment: List[str]

# --- Routine Generation Schemas ---
class RoutineGenerationRequest(BaseModel):
    user_profile: UserProfile
    # Optional field for future use, e.g., user's adherence score
    historical_achievement_rate: float | None = Field(default=None, ge=0, le=1)

class RoutineResponse(BaseModel):
    # The structured JSON routine generated by the AI
    routine: Dict[str, Any] = Field(..., description="The structured workout routine in JSON format")

# --- AI Coach Schemas ---
class ChatMessage(BaseModel):
    role: Literal["user", "ai"]
    content: str

class CoachRequest(BaseModel):
    user_message: str
    chat_history: List[ChatMessage] = Field(default_factory=list)
    user_profile: UserProfile # Providing profile for context

class CoachResponse(BaseModel):
    ai_message: str
